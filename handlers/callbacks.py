from telegram.ext import(
                    CallbackContext,
                    CallbackQueryHandler
                    )
                    

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from ai import dish_describer
from utils.logger import log_action
from database import db
from database.models import Dish

async def want_all_know_handler(update:Update,context:CallbackContext):
        query = update.callback_query
        dish_id = int(query.data.split('=')[-1])
        dish = Dish()
        dish.from_tuple(db.get_dish_by_id(dish_id))
        #–≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å –±—É–¥–µ—Ç –≤ –±—É–¥—É—â–µ–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –∫–µ—à—É
        processing_msg = await context.bot.send_message(
        chat_id=query.message.chat_id,
        text="–ò–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ üíæ..."
        )
        result = db.get_ans_neurlink(dish_id)
        if result == None:
                result = await dish_describer.run(dish)
                db.update_dish_by_id(dish_id,result,"ans_neurlink")
                
        if result:
                await context.bot.edit_message_text(
                chat_id=query.message.chat_id,
                message_id=processing_msg.message_id,
                text=result
            )
        else: 
                await context.bot.edit_message_text(
                chat_id=query.message.chat_id,
                message_id=processing_msg.message_id,
                text="–ö –Ω–∞—à–µ–º—É —Å–æ–∂–∞–ª–µ–Ω–∏—é, –æ–ø–∏—Å–∞–Ω–∏–µ –±–ª—é–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç—ÉüòÉ"
            )
        
        #–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        log_action(user=update.effective_user.username, action=f"–ö–ª–∏–µ–Ω—Ç –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É '–•–æ—á—É –≤—Å–µ –∑–Ω–∞—Ç—å' –¥–ª—è –±–ª—é–¥–∞ '{dish.name}' ", level="INFO")
        
        #–Ω—É–∂–Ω–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç–æ–ª–±–µ—Ü properties, 
        #–¥–ª—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –±–ª—é–¥–∞ –æ—Ç —Å–∞–º–æ–≥–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è

async def show_properties(update:Update,context:CallbackContext):
        query = update.callback_query
        dish_id = int(query.data.split('=')[-1])
        dish = Dish()
        dish.from_tuple(db.get_dish_by_id(dish_id))
        props_info="–ü—É—Å—Ç–æ"
        if dish.properties:
                props_info = dish.properties
        keyboard = [
                [InlineKeyboardButton(text = "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å",callback_data = f"change_dish_id={dish.id}")]
               
            ]
        await context.bot.send_message(chat_id = query.message.chat_id, text = props_info,reply_markup=InlineKeyboardMarkup(keyboard))

async def add_dish_to_card(update:Update,context:CallbackContext):
       query = update.callback_query
       dish_id = int(query.data.split('=')[-1])
       if 'card' in  context.user_data:
         context.user_data['card'].append(dish_id)
       else:
         context.user_data['card'] = [dish_id]
       await  query.answer("–ë–ª—é–¥–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ ‚úÖ")




def get():
    neurlink_handler = CallbackQueryHandler(pattern=r"^dish_id",callback=want_all_know_handler)
    show_props_handler = CallbackQueryHandler(pattern=r"^props_dish_id",callback=show_properties)
    add_to_card_handler = CallbackQueryHandler(pattern=r"^card_dish_id",callback=add_dish_to_card)
    return [neurlink_handler,show_props_handler,add_to_card_handler]