from telegram.ext import(
                    ContextTypes,
                    ConversationHandler)
                    
                
from telegram import Update
from database import db
from database import models

async def cancel_add_dish(update:Update,context:ContextTypes.DEFAULT_TYPE):
     await update.message.reply_text("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æüîô")
     return ConversationHandler.END

async def default(update:Update,context:ContextTypes.DEFAULT_TYPE):
     await update.message.reply_text("–°–ª–µ–¥–∏—Ç–µ –∑–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏...‚ö†Ô∏è")

async def start_add_dish(update:Update,context:ContextTypes.DEFAULT_TYPE):
    if  'admin' in  context.user_data:
          await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞")
          return "name"
    else:
         await update.message.reply_text("–î–ª—è –Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –∞–¥–º–∏–Ω–∞")
         return ConversationHandler.END
    

async def get_name(update:Update,context:ContextTypes.DEFAULT_TYPE):
    context.user_data["name"] = update.message.text
   
    await update.message.reply_text("–°–¥–µ–ª–∞–π—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                                    "[–¶–µ–Ω–∞]\n"
                                    "[–¢–µ–≥–∏: –í–µ–≥–∞–Ω/–ú—è—Å–æ–µ–¥/–ë–µ–∑–≥–ª—é—Ç–µ–Ω/–î–∏–∞–±–µ—Ç–∏–∫]\n"
                                    "[–û–ø–∏—Å–∞–Ω–∏–µ]")
    return "desc"

async def get_desc(update:Update,context:ContextTypes.DEFAULT_TYPE):
       if len(update.message.text.split('\n'))!=3:
            await update.message.reply_text("–û–ø–∏—Å–∞–Ω–∏–µ —Å–¥–µ–ª–∞–Ω–æ –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ‚ùå")
            return "desc"
       else:
        context.user_data["desc"] = update.message.text
        await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ")
        return "photo"


async def get_photo(update:Update,context:ContextTypes.DEFAULT_TYPE):
       print("—Ñ–æ—Ç–æ –ø—Ä–∏—à–ª–æ")
       print(update.message)
       photo = await update.message.photo[-1].get_file()
       binary_photo = await  photo.download_as_bytearray()
       context.user_data["photo"] = binary_photo
       result = save_dish(context.user_data)
       if result: 
            await update.message.reply_text("–ë–ª—é–¥–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ ‚úÖ")
       else:
             await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ ‚òπÔ∏è")
       return ConversationHandler.END

def save_dish(data):
     name = data["name"]
     photo = data["photo"]
     price,tags,desc = data["desc"].split('\n')
     dish = models.Dish(name,int(price),tags,desc,photo)
     return db.add_dish(dish)