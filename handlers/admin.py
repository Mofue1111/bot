import sqlite3
from telegram.ext import(
                    CommandHandler,
                    ContextTypes,
                    ConversationHandler,
                    MessageHandler,
                    filters,
                    CallbackContext)
                    

from telegram import Update,ReplyKeyboardMarkup,InlineKeyboardMarkup,InlineKeyboardButton
from utils.logger import log_action
from utils import validation
from database import db
from database import models
from handlers.dialogs.add_dish import *

async def admin(update:Update,context:ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ üìû –≤ —Ñ–æ—Ä–º–∞—Ç–µ 8(000)(000)(00)(00) ")
    return "phone"

async def get_phone(update:Update,context:ContextTypes.DEFAULT_TYPE):
    phone = update.message.text
    if validation.validate_phone_number(phone):
        user =  db.get_user_by_phone(phone)
        if user:
            context.user_data["admin"] = user
            keyboard = [
                ["–î–æ–±–∞–≤–∏—Ç—å‚ûï"],
                ["–ü–æ–∫–∞–∑–∞—Ç—å –±–ª—é–¥–∞üëÅ‚Äçüó®"]
            ]
            await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç üëã",
                                            reply_markup=ReplyKeyboardMarkup(keyboard))
            
            #–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            log_action(user=update.effective_user.username, action="–í—Ö–æ–¥ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –∞–¥–º–∏–Ω–∞", level="INFO")

            return ConversationHandler.END
        else:
             await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω ‚ùå")
             #–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
             log_action(user=update.effective_user.username, action="–í—Ö–æ–¥ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –∞–¥–º–∏–Ω–∞. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω ‚ùå", level="ERROR")
    else:
        await update.message.reply_text("–í–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω üî¥")
        #–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        log_action(user=update.effective_user.username, action="–í—Ö–æ–¥ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –∞–¥–º–∏–Ω–∞. –í–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω üî¥", level="ERROR")


async def admin_view_orders(update: Update, context: CallbackContext):
    conn = sqlite3.connect("bot.db")
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM orders")
    orders = cursor.fetchall()

    if not orders:
        await update.message.reply_text("–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤")
        return

    text = "üìã *–í—Å–µ –∑–∞–∫–∞–∑—ã:*\n"
    for order in orders:
        text += f"\nüÜî –ó–∞–∫–∞–∑ ‚Ññ{order[0]} ‚Äî {order[4]} ‚Äî {order[1]} –±–ª—é–¥, {order[2]}‚ÇΩ, —Å—Ç–∞—Ç—É—Å: {order[5]}\n"

    await update.message.reply_text(text, parse_mode='Markdown')


def get():
    login_handler = ConversationHandler(
        entry_points=[CommandHandler("admin",admin)],
        states={
            "phone": [MessageHandler(filters.TEXT,get_phone)]
        },
        fallbacks=[]
    )
    add_dish_handler = ConversationHandler(
         entry_points=[MessageHandler(filters.Text("–î–æ–±–∞–≤–∏—Ç—å‚ûï"),start_add_dish)],
         states={
              "name": [MessageHandler(filters.TEXT&~filters.COMMAND,get_name),
                       CommandHandler("cancel",cancel_add_dish)],
              "desc": [MessageHandler(filters.TEXT&~filters.COMMAND,get_desc),
                       CommandHandler("cancel",cancel_add_dish)],
              "photo":[
                   MessageHandler(filters.PHOTO,get_photo),
                   CommandHandler("cancel",cancel_add_dish)]
         },
         fallbacks=[CommandHandler("cancel",cancel_add_dish)]
    )
    admin_orders_handler = MessageHandler(filters.Text("–ó–∞–∫–∞–∑—ã"), admin_view_orders)
    return [login_handler,add_dish_handler,admin_orders_handler]







          
     
 
     
    
    